{"version":3,"sources":["serviceWorker.ts","features/CommonActions/App.ts","utils/redux-utils.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","api/types.ts","features/Application/selectors.ts","api/todolists-api.ts","features/Auth/selectors.tsx","utils/error-utils.ts","features/Auth/auth-reducer.ts","features/Auth/Login.tsx","features/Auth/index.tsx","features/Application/application-reducer.ts","features/Application/index.tsx","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","appActions","setAppStatus","createAction","setAppError","useAppDispatch","useDispatch","useActions","actions","dispatch","useMemo","bindActionCreators","Alert","props","elevation","variant","ErrorSnackbar","error","useSelector","state","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","TaskStatuses","TaskPriorities","selectStatus","status","selectIsInitialized","isInitialized","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","selectIsLoggedIn","auth","isLoggedIn","handleAsyncServerAppError","thunkAPI","showError","messages","length","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","login","createAsyncThunk","param","a","res","resultCode","logout","asyncActions","slice","createSlice","name","initialState","reducers","setIsLoggedIn","action","payload","value","extraReducers","builder","addCase","fulfilled","Login","reducer","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","authActions","resultAction","rejected","setFieldError","field","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","type","FormControlLabel","control","Checkbox","checked","Button","color","authReducer","initializeApp","appReducer","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatus","addTodolistTC","todolist","changeTodolistTitleTC","changeTodolistFilter","index","findIndex","tl","filter","entityStatus","map","splice","unshift","fetchTasks","tasks","items","removeTask","addTask","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","asyncTodolistsActions","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","style","marginLeft","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","tasksActions","onClickHandler","useCallback","onChangeHandler","Completed","New","onTitleChangeHandler","newValue","key","className","position","size","top","right","Delete","fontSize","Todolist","demo","todolistsActions","useEffect","addTaskCallback","helper","thunk","errorMessage","changeTodolistTitle","onFilterButtonClickHandler","tasksForTodolist","renderFilterButton","buttonFilter","text","Paper","padding","paddingTop","TodolistsList","addTodolistCallback","spacing","flexWrap","overflowX","allTodolistTasks","width","todolistsAsyncActions","todolistsSlice","tasksAsyncActions","tasksSlice","todolistsReducer","tasksReducer","App","authSelectors","logoutHandler","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.45b7fc68.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the appActions load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web appActions is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different appActions. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Application is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createAction} from '@reduxjs/toolkit'\r\nimport {RequestStatusType} from '../Application/application-reducer'\r\n\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>('appActions/setAppStatus')\r\nconst setAppError = createAction<{error: string | null}>('appActions/setAppError')\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError\r\n}\r\n","import {useDispatch} from 'react-redux'\r\nimport {AppDispatchType} from './types'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\nimport {useMemo} from 'react'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n\r\n    return boundActions\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from '../../features/CommonActions/App'\r\nimport {AppRootStateType} from '../../utils/types'\r\nimport {useActions} from '../../utils/redux-utils'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setAppError({error: null});\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","export type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string; error: string }\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {AppRootStateType} from '../../utils/types'\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized\r\n","import axios from 'axios'\r\nimport {GetTasksResponse, LoginParamsType, ResponseType, TaskType, TodolistType, UpdateTaskModelType} from './types'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '5675685f-9cd0-43c9-b668-1f134f354acb'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n","import {AppRootStateType} from '../../utils/types'\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn\r\n","import { AxiosError } from 'axios'\r\nimport { ResponseType } from '../api/types'\r\nimport { appActions } from '../features/CommonActions/App'\r\n\r\n// original type:\r\n// BaseThunkAPI<S, E, D extends Dispatch = Dispatch, RejectedValue = undefined>\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n","import {authAPI} from '../../api/todolists-api'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {FieldErrorType, LoginParamsType} from '../../api/types'\r\nimport {appActions} from '../CommonActions/App'\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType,\r\n    { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(login.fulfilled, (state) => {\r\n                state.isLoggedIn = true\r\n            })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n\r\n","import { Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField } from '@material-ui/core'\r\nimport { FormikHelpers, useFormik } from 'formik'\r\nimport React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { useAppDispatch } from '../../utils/redux-utils'\r\nimport { login } from './auth-reducer'\r\nimport { authActions } from './index'\r\nimport { selectIsLoggedIn } from './selectors'\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const resultAction = await dispatch(authActions.login(values));\r\n\r\n            if  (login.rejected.match(resultAction)) {\r\n                if (resultAction.payload?.fieldsErrors?.length) {\r\n                    const error = resultAction.payload?.fieldsErrors[0];\r\n                    formikHelpers.setFieldError(error.field, error.error);\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from './selectors'\r\nimport {Login} from './Login'\r\nimport {asyncActions, slice} from './auth-reducer'\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer\r\n}\r\n","import {authAPI} from '../../api/todolists-api'\r\nimport {authActions} from '../Auth'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\n\r\nconst initializeApp = createAsyncThunk('application/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(authActions.setIsLoggedIn({value: true}))\r\n    } else {\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state, action) => {\r\n                state.isInitialized = true\r\n            })\r\n            .addCase(appActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n","import * as appSelectors from './selectors'\r\nimport {RequestStatusType as T1, slice} from './application-reducer'\r\nimport {asyncActions} from './application-reducer'\r\n\r\nconst appReducer = slice.reducer\r\nconst actions = slice.actions\r\n\r\nconst appActions = {\r\n    ...actions,\r\n    ...asyncActions\r\n}\r\nexport type RequestStatusType = T1\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions\r\n}\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {RequestStatusType} from '../Application'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError,} from '../../utils/error-utils'\r\nimport {TodolistType} from '../../api/types'\r\nimport {ThunkError} from '../../utils/types'\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nconst fetchTodolistsTC = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>('todolists/fetchTodolists', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst removeTodolistTC = createAsyncThunk<{ id: string }, string, ThunkError>('todolists/removeTodolist', async (todolistId, {dispatch, rejectWithValue}) => {\r\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}))\r\n    const res = await todolistsAPI.deleteTodolist(todolistId)\r\n    //скажем глобально приложению, что асинхронная операция завершена\r\n    dispatch(setAppStatus({status: 'succeeded'}))\r\n    return {id: todolistId}\r\n})\r\nconst addTodolistTC = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>\r\n('todolists/addTodolist', async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\nconst changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, thunkAPI) => {\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map((tl) => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n            })\r\n            .addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTodolistTC.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            .addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n            })\r\n    }\r\n})\r\n\r\nexport const {changeTodolistFilter, changeTodolistEntityStatus} = slice.actions\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {asyncActions as asyncTodolistsActions} from './todolists-reducer'\r\nimport {AppRootStateType, ThunkError} from '../../utils/types'\r\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from '../../api/types'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>('tasks/fetchTasks', async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const removeTask = createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string }, ThunkError>('tasks/removeTask',\r\n    async (param, thunkAPI) => {\r\n        const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n    })\r\nexport const addTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>('tasks/addTask',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                return res.data.data.item\r\n            } else {\r\n                handleAsyncServerAppError(res.data, thunkAPI, false)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (err) {\r\n            return handleAsyncServerNetworkError(err, thunkAPI, false)\r\n        }\r\n    })\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string },\r\n                                                                      thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(asyncTodolistsActions.addTodolistTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(asyncTodolistsActions.removeTodolistTC.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(asyncTodolistsActions.fetchTodolistsTC.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach((tl: any) => {\r\n                    state[tl.id] = []\r\n                })\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void}\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = async () => {\r\n        if (title.trim() !== '') {\r\n                addItem(title, {setError, setTitle})\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled} style={{marginLeft: '5px'}}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {tasksActions, todolistsActions} from '../../index'\r\nimport {TaskStatuses, TaskType} from '../../../../api/types'\r\nimport {useActions} from '../../../../utils/redux-utils'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {updateTask, removeTask} = useActions(tasksActions)\r\n\r\n    const onClickHandler = useCallback(() => removeTask({taskId: props.task.id, todolistId: props.todolistId}),\r\n        [props.task.id, props.todolistId])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {title: newValue},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n    style={{position: 'relative'}}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton size={'small'} onClick={onClickHandler} style={{ position: 'absolute', top: '2px', right: '2px'} }>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton, Paper, PropTypes} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {tasksActions, todolistsActions} from '../index'\r\nimport {TaskStatuses, TaskType} from '../../../api/types'\r\nimport {useActions, useAppDispatch} from '../../../utils/redux-utils'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {changeTodolistFilter, removeTodolistTC, changeTodolistTitleTC} = useActions(todolistsActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        fetchTasks(props.todolist.id)\r\n    }, [])\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n\r\n        let thunk = tasksActions.addTask({title: title, todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n\r\n    }, [props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        removeTodolistTC(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        changeTodolistTitleTC({id: props.todolist.id, title: title})\r\n    }, [props.todolist.id])\r\n\r\n    const onFilterButtonClickHandler = useCallback((filter: FilterValuesType) => changeTodolistFilter({\r\n        filter: filter,\r\n        id: props.todolist.id\r\n    }), [props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValuesType,\r\n                                color: PropTypes.Color,\r\n                                text: string) => {\r\n        return <Button variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                       color={color}>{text}\r\n        </Button>\r\n    }\r\n\r\n    return <Paper style={{padding: '10px', position: 'relative'}}>\r\n        <IconButton\r\n            size={'small'}\r\n            onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}\r\n                    style={{position: 'absolute', right: '5px', top: '5px'}}\r\n        >\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n        <h3>\r\n            <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n            }\r\n            {!tasksForTodolist.length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            {renderFilterButton('all', 'default', 'All')}\r\n            {renderFilterButton('active', 'primary', 'Active')}\r\n            {renderFilterButton('completed', 'secondary', 'Completed')}\r\n        </div>\r\n    </Paper>\r\n})\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {TodolistDomainType} from './todolists-reducer'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from '../Auth/selectors'\r\nimport {tasksActions, todolistsActions} from './index'\r\nimport {AppRootStateType} from '../../utils/types'\r\nimport {useActions, useAppDispatch} from '../../utils/redux-utils'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const {fetchTodolistsTC, addTodolistTC} = useActions(todolistsActions)\r\n\r\n    const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todolistsActions.addTodolistTC(title)\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (todolistsActions.addTodolistTC.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        fetchTodolistsTC()\r\n    }, [])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <div style={{width: '300px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {asyncActions as todolistsAsyncActions, slice as todolistsSlice} from './todolists-reducer'\r\nimport {asyncActions as tasksAsyncActions, slice as tasksSlice} from './tasks-reducer'\r\nimport {TodolistsList} from './TodolistsList'\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...todolistsSlice.actions\r\n}\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\n\r\nconst todolistsReducer  = todolistsSlice.reducer\r\nconst tasksReducer  = tasksSlice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistsActions,\r\n    TodolistsList,\r\n    todolistsReducer,\r\n    tasksReducer\r\n}\r\n","import {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport { Menu } from '@material-ui/icons'\r\nimport React, { useCallback, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Route } from 'react-router-dom'\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport { appActions } from '../features/Application'\r\nimport { selectIsInitialized, selectStatus } from '../features/Application/selectors'\r\nimport { authActions, authSelectors, Login } from '../features/Auth'\r\nimport { TodolistsList } from '../features/TodolistsList'\r\nimport { useActions } from '../utils/redux-utils'\r\nimport './App.css'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            initializeApp()\r\n        }\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        logout()\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from '../features/Application'\r\nimport {authReducer} from '../features/Auth'\r\nimport {tasksReducer, todolistsReducer} from '../features/TodolistsList'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport App from './app/App'\r\nimport {store} from './app/store'\r\nimport {Provider} from 'react-redux'\r\nimport {BrowserRouter, HashRouter} from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App />\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'))\r\n\r\n// If you want your appActions to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}